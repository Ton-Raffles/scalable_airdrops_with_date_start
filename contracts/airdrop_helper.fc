#include "imports/stdlib.fc";
#include "constants.fc";

() set_claimed(int claimed) impure {
    set_data(begin_cell()
        .store_int(claimed, 1)
        .store_slice(get_data().begin_parse().skip_bits(1))
    .end_cell());
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int bounced? = cs~load_uint(4) & 1;
    if (bounced?) {
        slice sender = cs~load_msg_addr();
        slice ds = get_data().begin_parse().skip_bits(1);
        slice airdrop = ds~load_msg_addr();
        throw_unless(error::wrong_sender, equal_slices(sender, airdrop));
        int op = in_msg_body.skip_bits(32).preload_uint(32);
        throw_unless(error::wrong_operation, op == op::process_claim);
        set_claimed(0);
    }
}

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    throw_unless(error::not_enough_coins, my_balance >= const::min_balance + const::fee);
    slice ds = get_data().begin_parse();
    throw_if(error::already_claimed, ds~load_int(1));
    slice airdrop = ds~load_msg_addr();
    int proof_hash = ds~load_uint(256);
    int index = ds~load_uint(256);

    int query_id = in_msg_body~load_uint(64);
    cell proof = in_msg_body~load_ref();

    throw_unless(error::wrong_proof, proof.cell_hash() == proof_hash);

    accept_message();

    raw_reserve(const::min_balance, 0);

    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(airdrop)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(begin_cell()
            .store_uint(op::process_claim, 32)
            .store_uint(query_id, 64)
            .store_ref(proof)
            .store_uint(index, 256)
        .end_cell())
    .end_cell(), 128);
    
    set_claimed(-1);
}

(int) get_claimed() method_id {
    return get_data().begin_parse().preload_int(1);
}
