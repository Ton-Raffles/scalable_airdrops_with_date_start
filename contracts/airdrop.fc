#include "imports/stdlib.fc";
#include "jetton/jetton-utils.fc";
#include "constants.fc";

global slice data::jetton_wallet;
global int data::merkle_root;
global cell data::helper_code;
global int data::begin;

global int context::op;
global slice context::sender;
global int context::query_id;

() load_data() impure inline {
    slice ds = get_data().begin_parse();
    data::jetton_wallet = ds~load_msg_addr();
    data::merkle_root = ds~load_uint(256);
    data::helper_code = ds~load_ref();
    data::begin = ds~load_uint(64);
}

() save_data() impure inline {
    set_data(begin_cell()
        .store_slice(data::jetton_wallet)
        .store_uint(data::merkle_root, 256)
        .store_ref(data::helper_code)
        .store_uint(data::begin, 64)
    .end_cell());
}

(slice, int) begin_parse_exotic(cell c) asm "XCTOS";

(cell) helper_stateinit(int proof_hash, int index) {
    return begin_cell()
        .store_uint(6, 5)
        .store_ref(data::helper_code)
        .store_ref(begin_cell()
            .store_uint(0, 1)
            .store_slice(my_address())
            .store_uint(proof_hash, 256)
            .store_uint(index, 256)
        .end_cell())
    .end_cell();
}

(slice) helper_address(cell stateinit) {
    return begin_cell()
        .store_uint(0x400, 11)
        .store_uint(cell_hash(stateinit), 256)
    .end_cell().begin_parse();
}

() send_tokens(slice recipient, int amount) impure {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(data::jetton_wallet)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(begin_cell()
            .store_uint(op::jetton::transfer, 32)
            .store_uint(context::query_id, 64)
            .store_coins(amount)
            .store_slice(recipient)
            .store_slice(recipient)
            .store_uint(0, 1)
            .store_coins(10000000)
            .store_uint(0, 1)
        .end_cell())
    .end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 96) {
        return ();
    }

    context::op = in_msg_body~load_uint(32);
    context::query_id = in_msg_body~load_uint(64);
    (_, context::sender) = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();

    load_data();

    if (context::op == op::deploy) {
        throw_unless(error::already_deployed, data::jetton_wallet.preload_uint(2) == 0);
        data::jetton_wallet = in_msg_body~load_msg_addr();
        save_data();
    }

    elseif (context::op == op::process_claim) {
        throw_unless(error::wrong_time, now() >= data::begin);

        cell proof_cell = in_msg_body~load_ref();
        int index = in_msg_body~load_uint(256);

        (slice cs, int exotic?) = proof_cell.begin_parse_exotic();
        throw_unless(42, exotic?);
        throw_unless(43, cs~load_uint(8) == 3);
        throw_unless(44, data::merkle_root == cs~load_uint(256));

        cell dict = cs~load_ref();
        (slice entry, int found?) = dict.udict_get?(256, index);
        throw_unless(45, found?);

        throw_unless(error::wrong_sender, equal_slices(context::sender, helper_address(helper_stateinit(proof_cell.cell_hash(), index))));

        send_tokens(entry~load_msg_addr(), entry~load_coins());
    }

    else {
        throw(0xffff);
    }
}

(slice, int, cell, int) get_contract_data() method_id {
    load_data();
    return (data::jetton_wallet, data::merkle_root, data::helper_code, data::begin);
}
